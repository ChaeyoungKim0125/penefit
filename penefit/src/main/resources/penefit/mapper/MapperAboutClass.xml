<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.penefit.moons.mapper.MapperAboutClass">
	<!-- xml이 동작하는 인터페이스의 주소 -->

	<!-- 클래스 count -->
	<select id="countClass" resultType="_int">
		SELECT COUNT(*) FROM class
	</select>
	
	<!--클래스 목록 조회 -->
	<select id="getClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		select * from class LIMIT #{startnum},8
	</select>


	<!-- 진행중인 클래스 count -->
	<select id="countOngingClass" resultType="_int">
		SELECT COUNT(*) FROM class WHERE class_date NOT BETWEEN
		'2000-07-01 00:00:00' AND (select CURRENT_TIMESTAMP())
	</select>
	
	<!--진행중인 클래스 목록 조회 -->
	<select id="getOngoingClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class WHERE class_date NOT BETWEEN
		'2000-07-01 00:00:00' AND (select CURRENT_TIMESTAMP()) LIMIT #{startnum},8
	</select>

	<!-- 마감된 강의 count -->
	<select id="expiredClassCount" resultType="_int">
		SELECT COUNT(*) FROM class WHERE class_date BETWEEN '2000-07-01
		00:00:00' AND (select CURRENT_TIMESTAMP())
	</select>
	
	<select id="homerecolist"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class WHERE class_date NOT BETWEEN
		'2000-07-01 00:00:00' AND (select CURRENT_TIMESTAMP()) 
		ORDER BY class_memcnt ASC limit 5
	</select>

	<!-- 마감된 강의 -->
	<select id="getExpiredClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class WHERE class_date BETWEEN '2000-07-01
		00:00:00' AND (select CURRENT_TIMESTAMP()) LIMIT #{startnum},8
	</select>
	
	<!-- 카테고리 별 클래스COUNT -->
	<select id="ctgClassCount" resultType="_int">
		SELECT COUNT(*) FROM class WHERE class_date NOT BETWEEN
		'2000-07-01 00:00:00' AND (select CURRENT_TIMESTAMP()) AND class_code
		LIKE
		CONCAT(#{key},'%')
	</select>

	<!-- 메인의 클래스 -->
	<select id="homenewlist"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class
		WHERE class_date NOT BETWEEN '2022-07-01
		00:00:00' AND (select
		CURRENT_TIMESTAMP()) order by class_regdate desc
		limit 5
	</select>
	
	<!--카테고리 별 클래스 목록 조회 -->
	<select id="getCtgClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class WHERE class_date NOT BETWEEN
		'2000-07-01 00:00:00' AND (select CURRENT_TIMESTAMP()) AND class_code
		LIKE
		CONCAT(#{param1},'%') LIMIT #{startnum},8
	</select>
	
	<!--신규 클래스 목록 조회 -->				
	<select id="getNewClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		SELECT * FROM class
		WHERE class_date NOT BETWEEN '2022-07-01 00:00:00' AND (select
		CURRENT_TIMESTAMP()) order by class_regdate desc limit 8
	</select>
	
	<!--클래스 검색 -->
	<select id="getSearchClassList"
		resultType="com.penefit.moons.domain.ClassVO">
		select * from class where class_code like CONCAT('%',
		#{keyword },'%') or class_subject like CONCAT('%', #{keyword},'%') or
		class_teacher like CONCAT('%', #{keyword},'%') or class_info like
		CONCAT('%', #{keyword},'%') LIMIT ${startnum},8
	</select>
	
	<!--클래스 검색 건수 -->
	<select id="getSearchClassListCnt" resultType="_int">
		select count(*)
		from class where class_code like CONCAT('%',
		#{keyword },'%') or
		class_subject like CONCAT('%', #{keyword},'%') or
		class_teacher like
		CONCAT('%', #{keyword},'%') or class_info like
		CONCAT('%',
		#{keyword},'%')
	</select>

	<!--클래스 상세보기 -->
	<select id="selectClassOne"
		resultType="com.penefit.moons.domain.ClassVO">
		select * from class where class_code = #{class_code }
	</select>

	<!-- 위시리스트 확인 -->
	<select id="checkWishlist" resultType="_int">
		select count(*) from
		wishlist where class_code = #{class_code } and member_id=#{member_id}
	</select>

	<!-- 위시리스트 추가 -->
	<insert id="addWishlist">
		insert into wishlist (member_id, class_code) values
		(#{member_id}, #{class_code})
	</insert>
	<!-- 위시리스트 삭제 -->
	<delete id="deleteWishlist">
		delete from wishlist where member_id = #{member_id}
		and class_code = #{class_code}
	</delete>

	<!-- 위시리스트 삭제2 -->
	<delete id="deleteWishlist2">
		delete from wishlist where member_id = #{member_id}
		and wishlist_num = #{wishlist_num}
	</delete>
	<!-- 위시리스트 목록조회 -->
	<select id="getWishlist"
		resultType="com.penefit.moons.domain.WishlistVO">
		SELECT w.wishlist_num, w.member_id, w.class_code,
		c.class_subject, c.suggest_photo, c.class_teacher, c.class_date,
		c.class_price, c.city_code from wishlist w, class c
		where member_id
		=#{member_id} AND w.class_code = c.class_code;
	</select>

	<!-- 동일한 제품코드가 장바구니에 있는지 확인 -->
	<select id="checkCcodeInCart" resultType="_int">
		select count(*) from
		shopping_cart where member_id=#{param2} and class_code=#{param1}
	</select>

	<!-- 장바구니 갯수세기 -->
	<select id="checkCntInCart" resultType="_int">
		select count(*) from
		shopping_cart where member_id=#{member_id}
	</select>

	<!-- 장바구니에 담기 -->
	<insert id="addShoppingcart">
		insert into shopping_cart (class_code, member_id)
		values (#{param1}, #{param2})
	</insert>

	<!-- 장바구니 목록보기 -->
	<select id="getShoppingcartList"
		resultType="com.penefit.moons.domain.CartVO">
		SELECT c.class_code, c.class_subject, c.suggest_photo,
		c.class_teacher, c.class_date, c.class_price,c.class_memlit,
		c.class_memcnt,
		s.shopping_cart_num
		FROM shopping_cart s, class c
		WHERE
		s.class_code = c.class_code AND member_id=#{member_id}
	</select>

	<!-- 장바구니에서 삭제 -->
	<delete id="deleteFromCart">
		delete from shopping_cart where shopping_cart_num =
		#{shopping_cart_num}
	</delete>

	<!-- 장바구니에서 전체삭제 -->
	<delete id="deleteAllFromCart">
		delete from shopping_cart where member_id =
		#{member_id}
	</delete>

	<!-- 장바구니용 회원정보 -->
	<select id="getMemberInfo"
		resultType="com.penefit.moons.domain.MemberVO">
		select * from member where member_id=#{member_id}
	</select>

	<!-- history에 추가 -->
	<insert id="addHistory">
		insert into buy_history (merchant_uid ,imp_uid,
		pay_method,bank_name, card_name, card_quota, amount, buy_history_date,
		member_id, buyer_name, buyer_email, buyer_tel, buyer_addr,
		buy_history_current, name, class_arr)
		values (
		#{history.merchant_uid},#{history.imp_uid},
		#{history.pay_method},#{history.bank_name , jdbcType=VARCHAR},
		#{history.card_name, jdbcType=VARCHAR},
		#{history.card_quota,
		jdbcType=VARCHAR}, #{history.amount }, NOW(), #{member_id },
		#{history.buyer_name},
		#{history.buyer_email, jdbcType=VARCHAR},
		#{history.buyer_tel, jdbcType=VARCHAR}, #{history.buyer_addr,
		jdbcType=VARCHAR}, '결제완료',
		#{history.name}, #{str})
	</insert>

	<!-- 클래스 정보얻기 -->
	<select id="getClass" resultType="string">
		select class_code from
		shopping_cart where shopping_cart_num = #{shopping_cart_num}
	</select>
	<!-- 얻은 클래스 정보로 개인 클래스리스트 업데이트 -->
	<insert id="addClassMember">
		insert into class_list (member_id, class_code,
		class_list_current, buy_history_num) values (#{member_id},
		#{class_code}, 'ongoing', #{buy_history_num})
	</insert>

	<!-- 얻은 클래스 정보로 클래스 신청인원 업데이트 -->
	<update id="updateClassMemcnt">
		update class set class_memcnt = class_memcnt+1 where
		class_code=#{class_code}
	</update>

	<!-- 히스토리 조회 -->
	<select id="getHistory"
		resultType="com.penefit.moons.domain.HistoryVO">
		select * from buy_history where member_id = #{member_id}
		order by buy_history_date desc
		limit #{pageNum}, 10
	</select>

	<select id="historymaxPage" resultType="_int">
		SELECT CEILING(COUNT(*)/10) from buy_history where member_id = #{member_id}
	</select>
	<!-- 히스토리 상세보기 -->
	<select id="getOneHistory"
		resultType="com.penefit.moons.domain.HistoryVO">
		select * from
		buy_history where member_id = #{member_id} and
		buy_history_num=#{buy_history_num}
	</select>

	<!-- 클래스 취소 -->
	<update id="cancelClass">
		update buy_history set buy_history_current = '취소승인대기'
		where buy_history_num=#{buy_history_num}
	</update>

	<!-- buy_history_num 받아오기 -->
	<select id="getOneHistory2" resultType="_int">
		select
		buy_history_num
		from buy_history where merchant_uid = #{merchant_uid}
	</select>

	<!-- 클래슼 코드 배열 받아오기 -->
	<select id="getClassArr" resultType="string">
		select class_arr
		from
		buy_history where buy_history_num = #{buy_history_num}
	</select>

	<!-- 취소시 수강인원 감소 -->
	<update id="delClassMember">
		update class set class_memcnt = class_memcnt-1 where
		class_code= #{class_code}
	</update>

	<!-- 취소시 나의 클래스에서 삭제 -->
	<delete id="delClassList">
		delete from class_list where
		buy_history_num=#{buy_history_num} and member_id =#{member_id}
	</delete>

	<!-- 리뷰등록 -->
	<insert id="addReview">
		insert into review (class_code, review_content,
		member_id, review_regdate, score, review_photo, buy_history_num)
		values (#{class_code},
		#{review_content},#{member_id}, now(), #{score},
		#{review_photo},#{buy_history_num})
	</insert>

	<!-- 선생님 확인하기 -->
	<select id="getTeacherId" resultType="string">
		select class_teacher from
		class where class_code =#{class_code}
	</select>

	<!-- 스코어가 있는지 확인하기 -->
	<select id="getScore" resultType="_Double">
		select score from member where
		member_id =#{member_id}
	</select>

	<!-- 만약 있다면? 등록이 아닌 업데이트 -->
	<update id="updateScore">
		update member set score = (score + #{score} )/2 where
		member_id =#{member_id}
	</update>

	<!-- 만약 없다면 등록! -->
	<update id="addScore">
		update member set score = #{score} where member_id
		=#{member_id}
	</update>

	<!-- 상세보기에 출력할 리뷰 -->
	<select id="getReview"
		resultType="com.penefit.moons.domain.ReviewVO">
		SELECT c.class_code, c.class_subject, c.city_code, r.*
		FROM
		review r, class c WHERE r.class_code=#{class_code}
		AND
		c.class_code=#{class_code}
		
	</select>
	
	<select id="getReviewOne" resultType="com.penefit.moons.domain.ReviewVO">
		SELECT * FROM review WHERE review_num=#{review_num}
	
	</select>

	<!-- 중복리뷰 방지 -->
	<select id="getReviewCheck" resultType="_int">
		select COUNT(*)
		from review
		WHERE class_code = #{class_code}
		and member_id=#{member_id}
		and buy_history_num=#{buy_history_num}
	</select>

	<!-- 리뷰목록 받기 -->

	<select id="getReviewList"
		resultType="com.penefit.moons.domain.ReviewVO">
		SELECT c.class_code, c.class_subject, c.city_code, r.*
		FROM
		review r, class c
		WHERE c.class_code = r.class_code and
		member_id=#{member_id}
		order by review_regdate desc
		limit #{pageNum}, 5
	</select>

	<!-- 리뷰수  -->
	<select id="reviewmaxPage" resultType="_int">
	SELECT CEILING(COUNT(*)/5) from review where member_id=#{member_id}
	</select>
	
	<!-- 제안수  -->
	<select id="suggestmaxPage" resultType="_int">
	SELECT CEILING(COUNT(*)/5) from suggest where member_id=#{member_id}
	</select>
	<!-- 문의수  -->
	<select id="qnamaxPage" resultType="_int">
	SELECT CEILING(COUNT(*)/5) from qna where member_id=#{member_id}
	</select>

	
	<!-- 방문자수 추 -->
	<insert id="insertVisits">
		INSERT INTO visits (visit, day)
		VALUES (visit + 1,
		now())
		ON DUPLICATE KEY UPDATE visit = visit + 1
	</insert>
</mapper>